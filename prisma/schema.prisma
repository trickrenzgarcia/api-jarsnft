generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Collections {
  id                        Int      @id @default(autoincrement())
  cid                       String   @default(uuid()) @db.Text
  collection                String   @db.Text
  name                      String   @db.Text
  description               String   @db.Text
  image_url                 String   @db.Text
  banner_image_url          String   @db.Text
  owner                     String   @db.Text
  safelist_status           String   @db.Text
  category                  String   @db.Text
  is_disabled               Boolean
  is_nsfw                   Boolean
  trait_offers_enabled      Boolean
  collection_offers_enabled Boolean
  jarsnft_url               String   @db.Text
  project_url               String   @db.Text
  wiki_url                  String   @db.Text
  discord_url               String   @db.Text
  telegram_url              String   @db.Text
  twitter_username          String   @db.Text
  instagram_username        String   @db.Text
  created_at                DateTime @default(now()) @db.Timestamp(0)

  @@map("collections")
}

model Nonce {
  id    Int    @id @default(autoincrement())
  nonce String

  @@map("nonce")
}

model Users {
  id         Int          @id @default(autoincrement())
  uid        String       @unique(map: "uid", length: 255) @db.Text
  email      String?      @db.Text
  name       String?      @db.Text
  address    String       @unique(map: "Users_address_key")
  is_listed  Boolean
  created_at DateTime     @default(now())
  role       String       @default("user")
  profile    UserProfile?

  @@map("users")
}

model ApiKeys {
  id         Int      @id @default(autoincrement())
  address    String   @db.VarChar(255)
  name       String   @db.VarChar(255)
  apiKey     String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Date
  expired_at DateTime @db.Date

  @@map("api_keys")
}

model Contracts {
  contract_id            String   @id(length: 255) @db.Text
  name                   String   @db.Text
  description            String   @db.Text
  image                  String   @db.Text
  external_link          String   @db.Text
  symbol                 String   @db.Text
  owner                  String   @db.Text
  primary_sale_recipient String   @db.Text
  fee_recipient          String   @db.Text
  app_uri                String   @db.Text
  createdAt              DateTime @default(now()) @db.DateTime(0)
  updatedAt              DateTime @default(now()) @db.DateTime(0)

  @@map("contracts")
}

model NftCollections {
  contract                String   @id @db.VarChar(255)
  collection_id           String   @unique
  image                   String   @db.Text
  name                    String   @db.Text
  symbol                  String   @db.Text
  description             String   @db.Text
  app_uri                 String   @db.Text
  external_link           String   @db.Text
  fee_recipient           String   @db.Text
  seller_fee_basis_points Int
  primary_sale_recipient  String   @db.Text
  trusted_forwarders      String   @db.LongText
  owner                   String   @db.Text
  view_count              Int      @default(0)
  created_at              DateTime @default(now()) @db.DateTime(0)

  @@map("nft_collections")
}

model UserProfile {
  address     String   @unique
  image_url   String?  @db.Text
  banner_url  String?  @db.Text
  is_verified Boolean  @default(false)
  socials     String?  @db.LongText
  updated_at  DateTime @default(now()) @db.DateTime(0)
  user        Users    @relation(fields: [address], references: [address])

  @@map("user_profile")
}
